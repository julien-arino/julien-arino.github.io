<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en, fr"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://julien-arino.github.io/renewed-website/feed.xml" rel="self" type="application/atom+xml"/><link href="https://julien-arino.github.io/renewed-website/" rel="alternate" type="text/html" hreflang="en, fr"/><updated>2025-05-26T22:25:37+00:00</updated><id>https://julien-arino.github.io/renewed-website/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://julien-arino.github.io/renewed-website/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://julien-arino.github.io/renewed-website/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://julien-arino.github.io/renewed-website/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024[[read-time]] min read We’re introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we’re introducing Gemini 1.5 Flash: a model that’s lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We’re also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5’s 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It’s optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it’s a lighter weight model than 1.5 Pro, it’s highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it’s been trained by 1.5 Pro through a process called “distillation,” where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash’s availability and pricing.Over the last few months, we’ve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we’ve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We’ve improved control over the model’s responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we’ve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we’re now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do — not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we’re also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We’re announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we’ve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind’s mission to build AI responsibly to benefit humanity, we’ve always wanted to develop universal AI agents that can be helpful in everyday life. That’s why today, we’re sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do — and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we’ve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we’ve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we’ve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they’re being used in, and respond quickly, in conversation.With technology like this, it’s easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We’ve made incredible progress so far with our family of Gemini models, and we’re always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we’re able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google’s privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let’s stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">Compiling R on a Raspberry Pi and getting rid of the 128 threads limitation</title><link href="https://julien-arino.github.io/renewed-website/blog/2023/R-on-raspberri-pi-and-more-than-128-threads/" rel="alternate" type="text/html" title="Compiling R on a Raspberry Pi and getting rid of the 128 threads limitation"/><published>2023-02-05T00:00:00+00:00</published><updated>2023-02-05T00:00:00+00:00</updated><id>https://julien-arino.github.io/renewed-website/blog/2023/R-on-raspberri-pi-and-more-than-128-threads</id><content type="html" xml:base="https://julien-arino.github.io/renewed-website/blog/2023/R-on-raspberri-pi-and-more-than-128-threads/"><![CDATA[<p>Does that title sound confusing? It should! Clearly, a 4 threaded Raspberry Pi should not hit that annoying “feature” baked in <code class="language-plaintext highlighter-rouge">R</code> whereby the number of sockets is limited to 125+3. Except that yes, it can, when the Pi used as the head node on a cluster.</p> <h2 id="the-context">The context</h2> <p>As part of work on COVID-19 response, I was awarded a contract to increase my capacity for at home computing. Of course, some work was still carried out in a proper HPC setting, but there is a benefit to being able to run mid-range stuff efficiently as well as prototype and debug stuff before sending it to some HPC resource. So in March and April 2020, I ordered and built four machines. Actually, make that five: four “proper” machines and a Pi to rule them all. All the pieces required 47 different deliveries and got me on a first name basis with several UPS and Amazon delivery people. After several exchanges, my setup has looked essentially like this:</p> <ul> <li>1 Raspberry Pi 4 with 4 GB of RAM running Ubuntu.</li> <li>3 Threadripper 3790X machines running Ubuntu, each with 128 GB RAM and a 500 GB NVMe M.2 HD.</li> <li>1 Threadripper 3990X machine running Ubuntu with 192 GB RAM (and also a 500 GB HD).</li> <li>1 NAS with 4 TB storage.</li> <li>1 swicth connecting all that can (i.e., all but the Pi) using link bonding and the Pi using a single link.</li> </ul> <p>The 3790X have 32 cores/64 threads, the 3990X has 64/128. So my little space heater (hydro bills have been impacted substantially when all the machines run concurrently) has 320 compute threads and 4 on the Pi.</p> <h2 id="my-original-usage">My original usage</h2> <p>With some tweaking of the BIOS, I gently overclocked the Threadrippers (the 3990X, in particular, is a little sluggish for the type of computations I run) and convinced the motherboards to recognise all the RAM at its posted speed. I started using in production right away, which means I did not bother with my configuration and kept things as simple as possible.</p> <p>This is when I hit the “125+3 sockets in <code class="language-plaintext highlighter-rouge">R</code>” issue the first time: my code was running fine on the 3970X but refusing to run on the 3990X. Dug into it and worked out that setting the number of CPUs to 125 in my calls to <code class="language-plaintext highlighter-rouge">makeCluster</code> on the 3990X did the trick. With 4 perfectly capable compute nodes and easily parallelisable tasks, it is easy enough to produce a job list and have the Pi distribute it between nodes, have the nodes save the results locally upon completion and have the Pi running periodic “<code class="language-plaintext highlighter-rouge">rsync</code> repatriations” of the results from the nodes to the NAS. Once the computations were done, I used one of the compute nodes to bring the pieces together.</p> <h2 id="compiling-r-to-remove-the-1253-sockets-limitation">Compiling <code class="language-plaintext highlighter-rouge">R</code> to remove the 125+3 sockets limitation</h2> <p>Besides using <strong>all</strong> threads on the 3990X, I am also keen to drive all computations from a single designated node (when warranted, of course). I have been meaning to do this for quite a while, but this was rather low on my priority list. (I also want to play around with solutions such as <code class="language-plaintext highlighter-rouge">slurm</code> or <code class="language-plaintext highlighter-rouge">htcondor</code>, but this will be for later.) And here, the 125+3 sockets pops up again: as far as I understand it, the head node needs as many sockets as threads it is talking to, i.e., 320 in my case.</p> <p>I have an old refurbished Dell Precision T7600 with two 8 cores E5-2690 Xeons and 128 GB of RAM that can be the head node. But what is the fun in that when I also have a Pi to play with? So, now that I have a bit more time, I decided to bite the bullet and try things out.</p> <p>First step, remove the 128 sockets limitation. Extremely easy: just compile <code class="language-plaintext highlighter-rouge">R</code> from sources. Which was deceptively easy, even on the Pi. This should not have been a surprise for someone coming from the days of yore when Linux did not have <code class="language-plaintext highlighter-rouge">deb</code> or <code class="language-plaintext highlighter-rouge">rpm</code> and every program installation required compilation. I took some inspiration <a href="https://www.psyctc.org/Rblog/posts/2021-03-26-compiling-r-on-a-raspberry-pi-4/">here</a>, but will point out that I had virtually none of the steps described there to follow, as I had had to install most of the software required for compilations prior to that.</p> <p>The process is easy. Download the <code class="language-plaintext highlighter-rouge">R</code> source code from <a href="https://cran.r-project.org/sources.html">here</a>. (I used the <a href="https://stat.ethz.ch/R/daily/R-patched.tar.gz">patched release</a>.) Extract the tarball and move into the resulting directory. See some information <a href="https://parallelly.futureverse.org/reference/availableConnections.html">here</a> about setting the maximum allowed number of connections, but in short: edit the file <code class="language-plaintext highlighter-rouge">src/main/connections.c</code> and replace</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define NCONNECTIONS 128
</span></code></pre></div></div> <p>with whatever limit you want to impose. There is some discussion <a href="https://github.com/HenrikBengtsson/Wishlist-for-R/issues/28">here</a> on potential issues related to the number chosen; completely ignoring these issues, I decided to pick 1024.</p> <p>Then <code class="language-plaintext highlighter-rouge">configure</code>, <code class="language-plaintext highlighter-rouge">make</code> (<code class="language-plaintext highlighter-rouge">make -j4</code>, perhaps) and <code class="language-plaintext highlighter-rouge">sudo make install</code> and you are in business. One remark, though: I prefer for the <code class="language-plaintext highlighter-rouge">R</code> executables and libraries to reside in <code class="language-plaintext highlighter-rouge">/usr</code> rather than <code class="language-plaintext highlighter-rouge">/usr/local</code> (for consistency with <code class="language-plaintext highlighter-rouge">deb</code> install of the standard code). Also, if you are going to run <code class="language-plaintext highlighter-rouge">rstudio-server</code>, you <strong>must</strong> compile for a shared <code class="language-plaintext highlighter-rouge">R</code> library. So, in short, instead of a simple <code class="language-plaintext highlighter-rouge">./configure</code>, I ran</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./configure <span class="nt">--prefix</span><span class="o">=</span>/usr <span class="nt">--enable-R-shlib</span>
</code></pre></div></div> <p>That latter point is worth mentioning: yes, <code class="language-plaintext highlighter-rouge">rstudio-server</code> on a Pi! I just recently realised that although the main <code class="language-plaintext highlighter-rouge">rstudio-server</code> site does not list it, <code class="language-plaintext highlighter-rouge">rstudio</code> and <code class="language-plaintext highlighter-rouge">rstudio-server</code> are available for <code class="language-plaintext highlighter-rouge">arm64</code> as <a href="https://dailies.rstudio.com/">daily builds</a>. And that <code class="language-plaintext highlighter-rouge">R</code> shared lib is important in this context: <code class="language-plaintext highlighter-rouge">rstudio-server</code> will not work otherwise.</p> <h2 id="taking-it-for-a-spin">Taking it for a spin</h2> <p>Simple call to check things are working. Run the following code, adapting to your setup. (Note that this implies you have set up your machines to use shared key <code class="language-plaintext highlighter-rouge">ssh</code>.) Note that in the code here, I have not yet used the adapted version of <code class="language-plaintext highlighter-rouge">R</code> on the 3990X, so I am limiting things to 125 threads there.</p> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">node0</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s1">'192.168.0.50'</span><span class="w">
</span><span class="n">node1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s1">'192.168.0.51'</span><span class="w">
</span><span class="n">node2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s1">'192.168.0.52'</span><span class="w">
</span><span class="n">node3</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s1">'192.168.0.53'</span><span class="w">
</span><span class="n">node4</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s1">'192.168.0.54'</span><span class="w">
</span><span class="n">machineAddresses</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="w">
  </span><span class="nf">list</span><span class="p">(</span><span class="n">host</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">node0</span><span class="p">,</span><span class="w"> </span><span class="n">user</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'jarino'</span><span class="p">,</span><span class="w"> </span><span class="n">ncore</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">),</span><span class="w">
  </span><span class="nf">list</span><span class="p">(</span><span class="n">host</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">node1</span><span class="p">,</span><span class="w"> </span><span class="n">user</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'jarino'</span><span class="p">,</span><span class="w"> </span><span class="n">ncore</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">64</span><span class="p">),</span><span class="w">
  </span><span class="nf">list</span><span class="p">(</span><span class="n">host</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">node2</span><span class="p">,</span><span class="w"> </span><span class="n">user</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'jarino'</span><span class="p">,</span><span class="w"> </span><span class="n">ncore</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">64</span><span class="p">),</span><span class="w">
  </span><span class="nf">list</span><span class="p">(</span><span class="n">host</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">node3</span><span class="p">,</span><span class="w"> </span><span class="n">user</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'jarino'</span><span class="p">,</span><span class="w"> </span><span class="n">ncore</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">64</span><span class="p">),</span><span class="w">
  </span><span class="nf">list</span><span class="p">(</span><span class="n">host</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">node4</span><span class="p">,</span><span class="w"> </span><span class="n">user</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'jarino'</span><span class="p">,</span><span class="w"> </span><span class="n">ncore</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">125</span><span class="p">)</span><span class="w">
</span><span class="p">)</span><span class="w">
</span><span class="n">spec</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">lapply</span><span class="p">(</span><span class="n">machineAddresses</span><span class="p">,</span><span class="w">
               </span><span class="k">function</span><span class="p">(</span><span class="n">machine</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
                 </span><span class="nf">rep</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="n">machine</span><span class="o">$</span><span class="n">host</span><span class="p">,</span><span class="w"> </span><span class="n">user</span><span class="o">=</span><span class="n">machine</span><span class="o">$</span><span class="n">user</span><span class="p">)),</span><span class="w">
                     </span><span class="n">machine</span><span class="o">$</span><span class="n">ncore</span><span class="p">)</span><span class="w">
               </span><span class="p">})</span><span class="w">
</span><span class="n">spec</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">unlist</span><span class="p">(</span><span class="n">spec</span><span class="p">,</span><span class="w"> </span><span class="n">recursive</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
</span><span class="n">parallelCluster</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">parallel</span><span class="o">::</span><span class="n">makeCluster</span><span class="p">(</span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'PSOCK'</span><span class="p">,</span><span class="w">
                                         </span><span class="n">master</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">node0</span><span class="p">,</span><span class="w">
                                         </span><span class="n">spec</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">spec</span><span class="p">)</span><span class="w">
</span><span class="n">print</span><span class="p">(</span><span class="n">parallelCluster</span><span class="p">)</span><span class="w">
</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nf">is.null</span><span class="p">(</span><span class="n">parallelCluster</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">parallel</span><span class="o">::</span><span class="n">stopCluster</span><span class="p">(</span><span class="n">parallelCluster</span><span class="p">)</span><span class="w">
  </span><span class="n">parallelCluster</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">()</span><span class="w">
</span><span class="p">}</span></code></pre></figure> <p>Then, calling <code class="language-plaintext highlighter-rouge">test_cluster.R</code> this code and running it from the command line,</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jarino@node0:~/CODE<span class="nv">$ </span>Rscript test_cluster.R 
socket cluster with 319 nodes on hosts ‘192.168.0.50’, ‘192.168.0.51’, ‘192.168.0.52’, ‘192.168.0.53’, ‘192.168.0.54’
</code></pre></div></div> <p>So we are good! For comparison, running from a node with a “standard” <code class="language-plaintext highlighter-rouge">R</code> without the number of sockets increased (modifying the head node to be <code class="language-plaintext highlighter-rouge">node1</code>), we get the usual error:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jarino@node1:~/CODE<span class="nv">$ </span>Rscript test_cluster.R 
Error <span class="k">in </span>socketConnection<span class="o">(</span><span class="s2">"localhost"</span>, port <span class="o">=</span> port, server <span class="o">=</span> TRUE, blocking <span class="o">=</span> TRUE,  : 
  all connections are <span class="k">in </span>use
Calls: &lt;Anonymous&gt; ... makePSOCKcluster -&gt; newPSOCKnode -&gt; socketConnection
Execution halted
Error <span class="k">in </span>gzfile<span class="o">(</span>file, <span class="s2">"rb"</span><span class="o">)</span> : all connections are <span class="k">in </span>use
Calls: &lt;Anonymous&gt; -&gt; cleanup -&gt; loadNamespace -&gt; readRDS -&gt; gzfile
</code></pre></div></div> <p>Two final remarks.</p> <ol> <li>The call to <code class="language-plaintext highlighter-rouge">makeCluster</code> can be quite lengthy (several minutes), even in this simple case with no functions or libraries to declare to the workers, so it is important to decide whether this level of parallelisation is required; if not, things may run much faster on 4 separate computers with result agregation as described earlier.</li> <li>Clearly, this setup will require, in most instances, to have the code running on the compute nodes store the result locally there rather than return results to the head node. Indeed, only small sized return values would not quickly overwhelm the Pi’s small RAM.</li> </ol>]]></content><author><name></name></author><category term="r-code"/><summary type="html"><![CDATA[Some considerations on compiling R on a Raspberry Pi to get rid of the 128 threads limitation]]></summary></entry><entry><title type="html">A short Mathematical Epidemiology course</title><link href="https://julien-arino.github.io/renewed-website/blog/2022/3MC-short-course-math-epi/" rel="alternate" type="text/html" title="A short Mathematical Epidemiology course"/><published>2022-04-29T00:00:00+00:00</published><updated>2022-04-29T00:00:00+00:00</updated><id>https://julien-arino.github.io/renewed-website/blog/2022/3MC-short-course-math-epi</id><content type="html" xml:base="https://julien-arino.github.io/renewed-website/blog/2022/3MC-short-course-math-epi/"><![CDATA[<p>I recently (early April 2022) taught a short course on Mathematical Epidemiology at <a href="https://www.nwu.ac.za/">North-West University</a> in Potchefstroom in South Africa. The course was part of the <a href="https://natural-sciences.nwu.ac.za/paa/3MC">Mathematical Modeling Mini-Courses (3MC)</a> series organised by Patrick M Tchepmo Djomegni (North-West University) and Mahamat S Daoussa Haggar (University of N’Djamena, Tchad).</p> <p>Videos were recorded during the event but were re-recorded because of issues that arose during recording; the new videos are part of this <a href="https://youtube.com/playlist?list=PLfRaznSpWo2sHwiQ04IT5STYdwarcMtRA">YouTube playlist</a>.</p> <p>The course involved both regular lectures and practicums (tutorial type lectures). The links are to the YouTube videos (see this <a href="https://julien-arino.github.io/3MC-course-epidemiological-modelling/">GitHub repo</a> for the slides, code and further information), which last a total of just over 15 hours.</p> <ul> <li>Lecture 00: <a href="https://youtu.be/MYBSTv1dWRA">Course organisation</a> - 21:16</li> <li>Lecture 01: <a href="https://youtu.be/StIRQIT0WSo">History of epidemics and Historical epidemics</a> - 47:13</li> <li>Lecture 02: <a href="https://youtu.be/tMHwnrN3dXk">Basic Mathematical Epidemiology</a> - 2:14:34</li> <li>Lecture 03: <a href="https://youtu.be/Jz317w81oZY">Spread of infections in groups / in space</a> - 56:45</li> <li>Lecture 04: <a href="https://youtu.be/j63HwBbapHE">Group models</a> - 29:21</li> <li>Lecture 05: <a href="https://youtu.be/wk64L-ZEOUM">Metapopulation epidemic models</a> - 1:43:34</li> <li>Lecture 06: <a href="https://youtu.be/ApPSTJfQN74">Stochastic aspects in the spread of epidemics</a> - 1:01:19</li> <li>Lecture 07: <a href="https://youtu.be/J4w5gCdReAI">Stochastic epidemic models</a> - 1:00:53</li> <li>Lecture 08: <a href="https://youtu.be/UpSv8JcNecg">Agent-based models</a> - 30:41</li> <li> <p>Lecture 09: <a href="https://youtu.be/tFjPug1f4Ms">Some recent mathematical models for HIV/AIDS, Malaria, COVID-19</a> - 1:05:36</p> </li> <li>Practicum 01: <a href="https://youtu.be/nzzugOQuaro">Introduction to R. Collecting data. Solving ODEs in R</a> - 1:59:56</li> <li>Practicum 02: <a href="https://youtu.be/KHm7KIt1_ys">Model analysis, studying large-scale models in R</a> - 1:40:09</li> <li>Practicum 03: <a href="https://youtu.be/5b1RDIz03S0">Analysis, studying stochastic models in R. Simulating agent-based models</a> - 1:13:41</li> </ul>]]></content><author><name></name></author><category term="presentations"/><summary type="html"><![CDATA[Lecture notes and videos of the 3MC short course on Mathematical Epidemiology I taught at NWU, South Africa, in April 2022]]></summary></entry><entry><title type="html">Un petit cours d’épidémiologie mathématique</title><link href="https://julien-arino.github.io/renewed-website/blog/2022/petit-cours-epi-math/" rel="alternate" type="text/html" title="Un petit cours d’épidémiologie mathématique"/><published>2022-04-29T00:00:00+00:00</published><updated>2022-04-29T00:00:00+00:00</updated><id>https://julien-arino.github.io/renewed-website/blog/2022/petit-cours-epi-math</id><content type="html" xml:base="https://julien-arino.github.io/renewed-website/blog/2022/petit-cours-epi-math/"><![CDATA[<p>En juin et juillet 2022, j’ai enseigné un “petit cours d’épidémiologie mathématique” à N’Djaména (Tchad), au sein du laboratoire <a href="https://l2mias.com/french/">L2MIAS</a>, à la demande de Mahamat S Daoussa Haggar (Président de l’<a href="https://www.universite-ndjamena.td/">Université de N’Djaména</a>).</p> <p>Les transparents du cours sont disponibles <a href="https://julien-arino.github.io/petit-cours-epidemio-mathematique/">ici</a>. J’enregisterai les vidéos correspondantes au cours durant l’automne 2022.</p>]]></content><author><name></name></author><category term="presentations"/><summary type="html"><![CDATA[Notes de cours d'un cours d'épidémiologie mathématique donné à N'Djaména (Tchad) en juin et juillet 2022.]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://julien-arino.github.io/renewed-website/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://julien-arino.github.io/renewed-website/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://julien-arino.github.io/renewed-website/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[<h3>External Posts on Your al-folio Blog</h3> <p>If you prefer publishing blog posts on medium.com or other external sources, starting version v0.5.0, <a href="https://github.com/alshedivat/al-folio">al-folio</a> lets you to display your external posts in the blog feed of your website! 🎉🎉</p> <p>Configuring external sources of super simple. After upgrading to v0.5.0, just add the following section to your _config.yml:</p> <pre>external_sources:<br />  - name: medium.com  # name of the source (arbitrary string)<br />    rss_url: <a href="https://medium.com/@al-folio/feed">https://medium.com/@&lt;your-medium-username&gt;/feed</a></pre> <p>The example above adds your medium.com blog post feed as an external source. But you can add arbitrary RSS feeds as sources.</p> <p>Any questions or suggestions? 👉 Start <a href="https://github.com/alshedivat/al-folio/discussions">a discussion on GitHub</a>!</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b60a1d241a0a" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry><entry><title type="html">Some useful Marp stuff</title><link href="https://julien-arino.github.io/renewed-website/blog/2022/useful-Marp-stuff/" rel="alternate" type="text/html" title="Some useful Marp stuff"/><published>2022-03-17T00:00:00+00:00</published><updated>2022-03-17T00:00:00+00:00</updated><id>https://julien-arino.github.io/renewed-website/blog/2022/useful-Marp-stuff</id><content type="html" xml:base="https://julien-arino.github.io/renewed-website/blog/2022/useful-Marp-stuff/"><![CDATA[<p>I posted some time back about using Marp to make presentations (see <a href="https://julien-arino.github.io/blog/2022/Marp-for-slides/">here</a>). In keeping with the idea that this blog is mostly for myself as a space to store stuff that is useful to me, here is a compendium of commands that I have found useful when preparing slides using Marp. I will edit this post regularly as I discover new tricks, rather than create another entry.</p> <p>As I mentioned in my original post about Marp, there is a gap between the way Marp is documented and my capacity to understand said documentation, but altogether: going further than what is doable using straight markdown is going to require using html/css code. So what follows is mostly in these formats. Note also that I am detailing stuff that works within Visual Studio Code, not using the command line version of Marp. The latter is more powerful and versatile but does not fit my current workflow.</p> <h2 id="using-multiple-columns-of-text">Using multiple columns of text</h2> <p>To generate the equivalent of a <code class="language-plaintext highlighter-rouge">minipage</code> in Beamer, you can use the following code.</p> <figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;style </span><span class="na">scoped</span><span class="nt">&gt;</span>
<span class="k">@import</span> <span class="sx">url('https://unpkg.com/tailwindcss@^2/dist/utilities.min.css')</span><span class="p">;</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"grid grid-cols-2 gap-4"</span><span class="nt">&gt;</span>
<span class="nt">&lt;div&gt;</span>

Content of first column
<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;div&gt;</span>

Content of second column
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></figure> <p>Two remarks. Firstly, the place where I got the code advocated for placing the import statement in the <code class="language-plaintext highlighter-rouge">yaml</code> header, something like</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
marp: true
-style: @import url('https://unpkg.com/tailwindcss@^2/dist/utilities.min.css');
---
</code></pre></div></div> <p>but I found that this results in a massive (1 MB) html file. Secondly, in the same spirit, I am using <code class="language-plaintext highlighter-rouge">&lt;style scoped&gt;</code> to say that this only applies to the current slide. Removing the keyword <code class="language-plaintext highlighter-rouge">scoped</code> would imply that all subsequent slides have access to the <code class="language-plaintext highlighter-rouge">grid grid-cols-2 gap-4</code> class. With, I imagine, the same code bloating. (Untested at this time.)</p> <h2 id="centering-figures">Centering figures</h2> <p>Another frustration when switching from Beamer to Marp is that there is no easy <code class="language-plaintext highlighter-rouge">\begin{center}</code> type command to center a figure in Marp. A variety of ways are available, but I found that the one that is easiest is to include something like</p> <figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;style&gt;</span>
<span class="nt">img</span><span class="o">[</span><span class="nt">alt</span><span class="o">~=</span><span class="s1">"center"</span><span class="o">]</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span>
  <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span> <span class="nb">auto</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">&lt;/style&gt;</span></code></pre></figure> <p>somewhere in your slides. Using <code class="language-plaintext highlighter-rouge">&lt;style&gt;</code> without the keyword <code class="language-plaintext highlighter-rouge">scope</code> means that the style is defined once and for all, so I put this at the end of my title page and forget about it. Once this is done,</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>![width:200px center](image_file.png)
</code></pre></div></div> <p>will center the figure.</p> <h2 id="boxes-for-definitions-theorems-etc">Boxes for definitions, theorems, etc.</h2> <p>Another one of these Beamer classics that is difficult to do in Marp.</p> <figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">align=</span><span class="s">justify</span> 
<span class="na">style=</span><span class="s">"background-color:#16a085;
border-radius:20px;
padding:10px 20px 10px 20px;
box-shadow: 0px 1px 5px #999;"</span><span class="nt">&gt;</span>

Some beautiful theorem (make sure to leave an empty line above the first line
of text if you want markdown to work).
<span class="nt">&lt;/div&gt;</span></code></pre></figure> <p>Now, here I have not done my homework: surely, there is a way to define this as a style, and it is likely that a future update of this blog post will have this. For the time being, I just copy and paste this code wherever I need it, changing the colour for definitions, etc.</p> <h2 id="numbering-equations-and-referring-to-them">Numbering equations and referring to them</h2> <p>This is my biggest frustration so far with using Marp. In many talks, I do not really care for this, but as part of a course that I am preparing (more on this in another post), I really need equation numbers. Whether it is MathJax or KaTeX, support for equation numbers is still sketchy altogether, but I find that Marp adds one level of complication. What I have managed to make work, at present, goes thusly.</p> <ul> <li>Switch the LaTeX interpreter from KaTeX to MathJax.</li> <li>Manually (grr) tag the equations with the number you want. Note the <code class="language-plaintext highlighter-rouge">\qquad</code> commands on the first line: if you do not use them in an <code class="language-plaintext highlighter-rouge">align</code> type environment, the equation numbers will be over the equations themselves.</li> </ul> <figure class="highlight"><pre><code class="language-latex" data-lang="latex"><span class="p">$$</span><span class="nb">
</span><span class="nv">\begin</span><span class="p">{</span><span class="nb">align</span><span class="p">}</span><span class="nb">
S' </span><span class="p">&amp;</span><span class="o">=</span><span class="nb"> d</span><span class="o">(</span><span class="nb">N</span><span class="o">-</span><span class="nb">S</span><span class="o">)-</span><span class="nb">f</span><span class="o">(</span><span class="nb">S,I,N</span><span class="o">)+</span><span class="nv">\nu</span><span class="nb"> R</span><span class="nv">\qquad\qquad</span><span class="nb"> </span><span class="nv">\tag</span><span class="p">{</span><span class="m">8</span><span class="nb">a</span><span class="p">}</span><span class="nv">\label</span><span class="p">{</span><span class="nb">sys:SLIR</span><span class="p">_</span><span class="nb">dS</span><span class="p">}</span><span class="nv">\\</span><span class="nb">
L' </span><span class="p">&amp;</span><span class="o">=</span><span class="nb"> f</span><span class="o">(</span><span class="nb">S,I,N</span><span class="o">)</span><span class="nb"> </span><span class="o">-(</span><span class="nb">d</span><span class="o">+</span><span class="nv">\varepsilon</span><span class="o">)</span><span class="nb">L </span><span class="nv">\tag</span><span class="p">{</span><span class="m">8</span><span class="nb">b</span><span class="p">}</span><span class="nv">\label</span><span class="p">{</span><span class="nb">sys:SLIR</span><span class="p">_</span><span class="nb">dL</span><span class="p">}</span><span class="nb"> </span><span class="nv">\\</span><span class="nb">
I' </span><span class="p">&amp;</span><span class="o">=</span><span class="nb"> </span><span class="nv">\varepsilon</span><span class="nb"> L </span><span class="o">-(</span><span class="nb">d</span><span class="o">+</span><span class="nv">\gamma</span><span class="o">)</span><span class="nb">I </span><span class="nv">\tag</span><span class="p">{</span><span class="m">8</span><span class="nb">a</span><span class="p">}</span><span class="nv">\label</span><span class="p">{</span><span class="nb">sys:SLIR</span><span class="p">_</span><span class="nb">dI</span><span class="p">}</span><span class="nb"> </span><span class="nv">\\</span><span class="nb">
R' </span><span class="p">&amp;</span><span class="o">=</span><span class="nb"> </span><span class="nv">\gamma</span><span class="nb"> I</span><span class="o">-(</span><span class="nb">d</span><span class="o">+</span><span class="nv">\nu</span><span class="o">)</span><span class="nb">R </span><span class="nv">\tag</span><span class="p">{</span><span class="m">8</span><span class="nb">d</span><span class="p">}</span><span class="nv">\label</span><span class="p">{</span><span class="nb">sys:SLIR</span><span class="p">_</span><span class="nb">dR</span><span class="p">}</span><span class="nb">
</span><span class="nv">\end</span><span class="p">{</span><span class="nb">align</span><span class="p">}</span><span class="nb">
</span><span class="p">$$</span></code></pre></figure> <ul> <li>Use <code class="language-plaintext highlighter-rouge">$\eqref{sys:SLIR_dL}$</code> to refer to, say, the second equation. Yes, the dollar signs need to be there..</li> </ul> <p>Yes, this is bad. It is particularly bad, actually, because I like the <code class="language-plaintext highlighter-rouge">subequations</code> environment and this is supported in neither KaTeX nor MathJax. I am hopeful that things will evolve in the future and will update this post if I find better ways to do this, but for now, this seems to be the way to do it.</p> <p>Remark that if you are not after a <code class="language-plaintext highlighter-rouge">subequations</code> type numbering, then you can do</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex"><span class="p">$$</span><span class="nb">
</span><span class="nv">\label</span><span class="p">{</span><span class="nb">sys:SLIR</span><span class="p">}</span><span class="nb">
</span><span class="nv">\begin</span><span class="p">{</span><span class="nb">align</span><span class="o">*</span><span class="p">}</span><span class="nb">
S' </span><span class="p">&amp;</span><span class="o">=</span><span class="nb"> d</span><span class="o">(</span><span class="nb">N</span><span class="o">-</span><span class="nb">S</span><span class="o">)-</span><span class="nb">f</span><span class="o">(</span><span class="nb">S,I,N</span><span class="o">)+</span><span class="nv">\nu</span><span class="nb"> R</span><span class="nv">\qquad\qquad</span><span class="nb"> </span><span class="nv">\\</span><span class="nb">
L' </span><span class="p">&amp;</span><span class="o">=</span><span class="nb"> f</span><span class="o">(</span><span class="nb">S,I,N</span><span class="o">)</span><span class="nb"> </span><span class="o">-(</span><span class="nb">d</span><span class="o">+</span><span class="nv">\varepsilon</span><span class="o">)</span><span class="nb">L </span><span class="nv">\\</span><span class="nb">
I' </span><span class="p">&amp;</span><span class="o">=</span><span class="nb"> </span><span class="nv">\varepsilon</span><span class="nb"> L </span><span class="o">-(</span><span class="nb">d</span><span class="o">+</span><span class="nv">\gamma</span><span class="o">)</span><span class="nb">I </span><span class="nv">\\</span><span class="nb">
R' </span><span class="p">&amp;</span><span class="o">=</span><span class="nb"> </span><span class="nv">\gamma</span><span class="nb"> I</span><span class="o">-(</span><span class="nb">d</span><span class="o">+</span><span class="nv">\nu</span><span class="o">)</span><span class="nb">R
</span><span class="nv">\end</span><span class="p">{</span><span class="nb">align</span><span class="o">*</span><span class="p">}</span><span class="nb">
</span><span class="p">$$</span></code></pre></figure> <p>This is a bit better. But no <code class="language-plaintext highlighter-rouge">subequations</code>..</p>]]></content><author><name></name></author><category term="presentations"/><summary type="html"><![CDATA[Compendium of commands useful in Marp: two columns, centering figures, formatting theorems, etc.]]></summary></entry><entry><title type="html">Using Marp to make cool html presentation slides</title><link href="https://julien-arino.github.io/renewed-website/blog/2022/Marp-for-slides/" rel="alternate" type="text/html" title="Using Marp to make cool html presentation slides"/><published>2022-02-20T00:00:00+00:00</published><updated>2022-02-20T00:00:00+00:00</updated><id>https://julien-arino.github.io/renewed-website/blog/2022/Marp-for-slides</id><content type="html" xml:base="https://julien-arino.github.io/renewed-website/blog/2022/Marp-for-slides/"><![CDATA[<p>For the file links, skip directly to the end of this post.</p> <h1 id="general-context">General context</h1> <p>Giving presentations about my research work is something I seem to do quite a lot. Perhaps because my MSc supervisor was a physician who put great emphasis on slide content and form, I have always spent a lot of time on my presentation files. I am often asked to give talks about my work on the spatio-temporal spread of infectious diseases using metapopulations; however, except in rare instances such as giving three times the same talk in three different universities over the course of two days, I always try to change things between two talks even if they have the same title. There is always something that did not flow well, some typo that appeared, some new idea to throw in, etc.</p> <p>All that to say: finding the good tool for preparing presentations has been an ongoing project.</p> <p>Let me start with the elephant in the room: I avoid like the plague tools like PowerPoint or LibreOffice Impress. This is a consequence of the epoch at which I started giving talks: back in the late 1990s, PowerPoint did very poorly with mathematics and only a few brave souls used it in talks.</p> <p>For efficiency, using a LaTeX based approach always seemed the best. You can copy and paste your content directly from your papers, thereby saving a lot of time. While it is possible to hack together a presentation, it is easier to use existing packages and through the years, I used several different tools.</p> <ul> <li><code class="language-plaintext highlighter-rouge">inriaslides</code>, back when I was working on my PhD at.. INRIA (now <a href="https://www.inria.fr/en/inria-centre-universite-cote-azur">Inria</a>).</li> <li>After I left Inria in 2001, it became silly to use their slide package (which put the logo everywhere, etc.) and so for a while, I actually used a simple model that I came up with. Key word being <em>simple</em>. I used this for about 2 years.</li> <li>In 2003, I started using <a href="https://ctan.org/pkg/prosper"><code class="language-plaintext highlighter-rouge">prosper</code></a>, which was a major step forward for LaTeX slides.</li> <li>Then, in the summer of 2005, I stumbled upon <a href="https://ctan.org/pkg/beamer"><code class="language-plaintext highlighter-rouge">Beamer</code></a>. <code class="language-plaintext highlighter-rouge">Beamer</code> was a revolution, because you compile your text directly using <code class="language-plaintext highlighter-rouge">pdflatex</code> instead of having to run through a sequence of conversions like with <code class="language-plaintext highlighter-rouge">prosper</code>.</li> </ul> <h1 id="beamer-and-the-joys-of-embedding-movies">Beamer and the joys of embedding movies</h1> <p><code class="language-plaintext highlighter-rouge">Beamer</code> is great, but one of the major headaches has always been the inclusion of movies in the <code class="language-plaintext highlighter-rouge">pdf</code> files generated. It was a pain, but with the retirement of <code class="language-plaintext highlighter-rouge">flash</code> support at the beginning of 2021, this became completely impossible. I do not embed that many movies, but it happens often enough that I need a reliable and not too complicated way of doing so.</p> <h1 id="marp">Marp</h1> <p>With the “death” of the flash route for embedding movies, I looked for other ways to generate files potentially involving movies. As part of my using <code class="language-plaintext highlighter-rouge">Rmarkdown</code>, I have become quite a fan of <code class="language-plaintext highlighter-rouge">markdown</code>, so when I found <a href="https://marp.app/">Marp</a>, I decided to give it a shot.</p> <p>One word of warning, first: Marp is developed by programmers who, I think, have not yet understood that with the proper support for LaTeX (see later) and the defection of people like me from the <code class="language-plaintext highlighter-rouge">Beamer</code> ecosystem, some of their newer users are not programmers. For now, requests for help are often answered promptly but not very helpfully from the perspective of a non-specialist. This is part of the reason for my making my markdown files accessible together with rendered html and pdf files of the presentations I will post.</p> <h2 id="running-marp">Running Marp</h2> <p>It is possible to install a command line version of Marp and this is the way to achieve the best results, but I find that the Visual Studio Code extension does a good enough job for my usage and that is what I use most often. You can preview what you type as you are typing it and can then easily export to <code class="language-plaintext highlighter-rouge">html</code>, <code class="language-plaintext highlighter-rouge">pdf</code> or PowerPoint.</p> <h2 id="writing-slides">Writing slides</h2> <p>The main thing to know is that your file needs to contain a <code class="language-plaintext highlighter-rouge">YAML</code> header to set a few properties of the document and separates <code class="language-plaintext highlighter-rouge">markdown</code> containing slides by <code class="language-plaintext highlighter-rouge">---</code> markers. And can include mathematics.</p> <ul> <li><strong>YAML header</strong>. This is where you define such things as the title that will appear in the browser tab (in the case of an <code class="language-plaintext highlighter-rouge">html</code> render), the slides form factor, inclusions, etc.</li> <li><strong>Separate slides with —</strong>. Beware to leave an empty line after and above the separators.</li> <li><strong>Markdown content</strong>. That makes things very easy.</li> <li><strong>Mathematics support</strong>. Probably the most important characteristic for modellers. Marp allows to choose whether you use <a href="https://www.mathjax.org/">MathJax</a> or <a href="https://katex.org/">KaTeX</a>, with KaTeX used by default. KaTeX seems to be faster than MathJax and is quite similar in practice to MathJax anyway. The biggest difference in my recent experience is that</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\begin{align*}
x &amp; xx \\
y &amp; yy 
\end{align*}
</code></pre></div></div> <ul class="list-unstyled"> needs to be typeset as </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$$
\begin{aligned}
x &amp; xx \\
y &amp; yy 
\end{aligned}
$$
</code></pre></div></div> <ul class="list-unstyled"> as KaTeX in Marp does not recognise ``\begin{align*}`` and similar environments. So porting LaTeX to Marp sometimes involves a little bit more work than when porting to Beamer, but this remains easy. </ul> <h2 id="additional-styling-elements">Additional styling elements</h2> <p>Note that it is possible to use <code class="language-plaintext highlighter-rouge">html</code> or <code class="language-plaintext highlighter-rouge">css</code> constructs in the code to obtain results that are more elaborate than what is allowed by basic <code class="language-plaintext highlighter-rouge">markdown</code>. This goes a bit against the philosophy that underlies LaTeX and <code class="language-plaintext highlighter-rouge">markdown</code>, but is useful.</p> <h1 id="where-to-find-my-presentation-files">Where to find my presentation files</h1> <p>[Update 2022-02-27] To finish, files are available from <a href="https://github.com/julien-arino/presentations">this GitHub repository</a>. They can be seen in several format.</p> <ul> <li>The <code class="language-plaintext highlighter-rouge">markdown</code> files, <code class="language-plaintext highlighter-rouge">pdf</code> and raw <code class="language-plaintext highlighter-rouge">html</code> files, as well as the figure and movie files, are located in the repo.</li> <li>The <code class="language-plaintext highlighter-rouge">html</code> files can be viewed in a browser by instead following the link to the GitHub pages <a href="https://julien-arino.github.io/presentations/">version of the repo</a>.</li> <li></li> </ul>]]></content><author><name></name></author><category term="presentations"/><summary type="html"><![CDATA[How to use Marp to make nice looking presentation slides, from the perspective of an only-partly-savvy computer user.]]></summary></entry><entry><title type="html">Spatio-temporal spread of COVID-19: considerations and modelling</title><link href="https://julien-arino.github.io/renewed-website/blog/2022/spatio-temporal-spread-of-covid-19-a-review/" rel="alternate" type="text/html" title="Spatio-temporal spread of COVID-19: considerations and modelling"/><published>2022-02-15T00:00:00+00:00</published><updated>2022-02-15T00:00:00+00:00</updated><id>https://julien-arino.github.io/renewed-website/blog/2022/spatio-temporal-spread-of-covid-19-a-review</id><content type="html" xml:base="https://julien-arino.github.io/renewed-website/blog/2022/spatio-temporal-spread-of-covid-19-a-review/"><![CDATA[<p>The paper I briefly present here together with some of the code used to generate figures, was published as “Describing, Modelling and Forecasting the Spatial and Temporal Spread of COVID-19: A Short Review” in <em>Fields Institute Communications</em> <strong>85</strong>:25-51 (2022). It can be downloaded <a href="https://doi.org/10.1007/978-3-030-85053-1_2">here</a> or from my webpage <a href="https://server.math.umanitoba.ca/~jarino/publications/Arino-2022-FIC85.pdf">here</a>. An older version is available on arXiv <a href="https://arxiv.org/pdf/2102.02457.pdf">here</a>.</p> <p>In the paper, I review several different aspects.</p> <ol> <li>The general context of mathematical models of the spatio-temporal spread of infectious pathogens.</li> <li>The details of how the first wave (mostly) of COVID-19 spread.</li> <li>Some spatio-temporal models that were considered specifically for COVID-19.</li> </ol> <p>Refer to the paper for details. Here, I describe how the data was gathered and the figures were produced.</p> <h1 id="collecting-data-on-initial-spread">Collecting data on initial spread</h1> <p>There are different sources for case data, but my favourite when considering the world-level situation is the one curated by JHSSE. I have an <code class="language-plaintext highlighter-rouge">R</code> script that pulls the data and performs basic pre-processing. This script is in turn called by a short <code class="language-plaintext highlighter-rouge">bash</code> script that runs in <code class="language-plaintext highlighter-rouge">cron</code>, so that data pulling happens every day. Note that the data on initial spread is not concerned by this pull operation, I am just detailing this point here for completeness.</p> <p>The JHSSE site is, understandably, concerned about the current and future evolution of COVID-19 and thus the data on the initial spread needs to be investigated further. For this, I relied on a combination of Wikipedia and Google News search, threw in some GISAID data..</p> <h1 id="the-tsa-data">The TSA data</h1> <p>If you have initiated an public airplane trip in the USA in the past few years, you know the system. For those who have not, here is how things work. From the unsecured area in an airport, the first security check involves showing your boarding pass and an identification document to a Transportation Security Administration (<a href="https://www.tsa.gov/">TSA</a>) officer who verifies both before allowing you to proceed with the remainder of the checks (baggage and body scan, etc.) to admit you into the secure zone of the airport.</p> <p>When considering air travel, this data is very interesting. Indeed, one is checked only in the first airport of a trip, regardless of the number of connecting flights taken; this means that the data is quite representative of the number of trips initiated in the USA on a given day. The TSA records how many of these checks happen and reports this data openly; it is available <a href="https://www.tsa.gov/coronavirus/passenger-throughput">here</a>.</p> <p>Interestingly, the data is provided “shifted”, i.e., the year to year difference is shown in terms of corresponding day of the week. Comparing, say, 3 January 2021 (a Sunday) and 3 January 2022 (a Monday) makes little sense. However, this means that while the table can be consumed “as is” for a plot comparing yearly numbers of checks, it also needs to be processed a little before being stored or used for anything not straightforward. This is further required because of the presentation of the table, which has the latest data posted as the top row, decreasing dates, then wraps around and has the next missing date as the last day. For instance, writing this on 15 February, the table has 14 February as its top row, decreasing days, then has 16 February as its last row (because 16 February 16 corresponds to 15 February last year).</p> <p>So let us dig into this data. First, the basics. Let us grab the data and clean it.</p> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># Grab the data</span><span class="w">
</span><span class="n">tsa</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">htmltab</span><span class="o">::</span><span class="n">htmltab</span><span class="p">(</span><span class="s2">"https://www.tsa.gov/coronavirus/passenger-throughput"</span><span class="p">,</span><span class="w">
                       </span><span class="n">which</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">rm_nodata_cols</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
</span><span class="c1"># Slight change of column names for convenience</span><span class="w">
</span><span class="n">colnames</span><span class="p">(</span><span class="n">tsa</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"date"</span><span class="p">,</span><span class="w"> </span><span class="s2">"vol2022"</span><span class="p">,</span><span class="w"> </span><span class="s2">"vol2021"</span><span class="p">,</span><span class="w"> </span><span class="s2">"vol2020"</span><span class="p">,</span><span class="w"> </span><span class="s2">"vol2019"</span><span class="p">)</span><span class="w">
</span><span class="c1"># Get rid of thousands separators, make numbers</span><span class="w">
</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">c</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"vol2022"</span><span class="p">,</span><span class="s2">"vol2021"</span><span class="p">,</span><span class="s2">"vol2020"</span><span class="p">,</span><span class="s2">"vol2019"</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
   </span><span class="n">tsa</span><span class="p">[[</span><span class="n">c</span><span class="p">]]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">gsub</span><span class="p">(</span><span class="n">pattern</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">","</span><span class="p">,</span><span class="w"> </span><span class="n">replacement</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tsa</span><span class="p">[[</span><span class="n">c</span><span class="p">]])</span><span class="w">
   </span><span class="n">tsa</span><span class="p">[[</span><span class="n">c</span><span class="p">]]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">as.numeric</span><span class="p">(</span><span class="n">tsa</span><span class="p">[[</span><span class="n">c</span><span class="p">]])</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="c1"># Make dates proper</span><span class="w">
</span><span class="n">tsa</span><span class="o">$</span><span class="n">date</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lubridate</span><span class="o">::</span><span class="n">mdy</span><span class="p">(</span><span class="n">tsa</span><span class="o">$</span><span class="n">date</span><span class="p">)</span></code></pre></figure> <p>If we want to plot things with the latest day in the data as the first day, things are easy. Note that we use the “axis prettyfier” that I presented <a href="https://julien-arino.github.io/2018/US-plotting-nice-axes-and-cropping">here</a>.</p> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># Get range of values to plot and compute pretty y axis</span><span class="w">
</span><span class="n">y_min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">min</span><span class="p">(</span><span class="n">tsa</span><span class="p">[,</span><span class="m">2</span><span class="o">:</span><span class="m">5</span><span class="p">],</span><span class="w"> </span><span class="n">na.rm</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="n">y_max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">max</span><span class="p">(</span><span class="n">tsa</span><span class="p">[,</span><span class="m">2</span><span class="o">:</span><span class="m">5</span><span class="p">],</span><span class="w"> </span><span class="n">na.rm</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="n">y_range</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">make_y_axis</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="n">y_min</span><span class="p">,</span><span class="w"> </span><span class="n">y_max</span><span class="p">))</span><span class="w">
</span><span class="c1"># Make a colour palette</span><span class="w">
</span><span class="n">my_palette</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sprintf</span><span class="p">(</span><span class="s2">"dodgerblue%d"</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="o">:</span><span class="m">4</span><span class="p">)</span><span class="w">
</span><span class="c1"># Start the plot. Plot 2019</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">tsa</span><span class="o">$</span><span class="n">date</span><span class="p">,</span><span class="w"> </span><span class="n">tsa</span><span class="o">$</span><span class="n">vol2019</span><span class="o">*</span><span class="n">y_range</span><span class="o">$</span><span class="n">factor</span><span class="p">,</span><span class="w"> </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"l"</span><span class="p">,</span><span class="w">
     </span><span class="n">ylim</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">y_min</span><span class="p">,</span><span class="n">y_max</span><span class="p">)</span><span class="o">*</span><span class="n">y_range</span><span class="o">$</span><span class="n">factor</span><span class="p">,</span><span class="w">
     </span><span class="n">lwd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"red"</span><span class="p">,</span><span class="w">
     </span><span class="n">xaxs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"i"</span><span class="p">,</span><span class="w"> </span><span class="n">yaxt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"n"</span><span class="p">,</span><span class="w">
     </span><span class="n">xlab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Month"</span><span class="p">,</span><span class="w"> </span><span class="n">ylab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Travellers screened"</span><span class="p">)</span><span class="w">
</span><span class="c1"># Plot remaining years</span><span class="w">
</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">2020</span><span class="o">:</span><span class="m">2022</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">vol_y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sprintf</span><span class="p">(</span><span class="s2">"vol%d"</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="p">)</span><span class="w">
  </span><span class="n">lines</span><span class="p">(</span><span class="n">tsa</span><span class="o">$</span><span class="n">date</span><span class="p">,</span><span class="w"> </span><span class="n">tsa</span><span class="p">[[</span><span class="n">vol_y</span><span class="p">]]</span><span class="o">*</span><span class="n">y_range</span><span class="o">$</span><span class="n">factor</span><span class="p">,</span><span class="w">
        </span><span class="n">lwd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">my_palette</span><span class="p">[</span><span class="m">2023</span><span class="o">-</span><span class="n">y</span><span class="p">])</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="c1"># Throw in the axis, legend..</span><span class="w">
</span><span class="n">axis</span><span class="p">(</span><span class="n">side</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">at</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">y_range</span><span class="o">$</span><span class="n">ticks</span><span class="p">,</span><span class="w"> </span><span class="n">labels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">y_range</span><span class="o">$</span><span class="n">labels</span><span class="p">,</span><span class="w"> </span><span class="n">las</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w">
</span><span class="n">legend</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"bottomright"</span><span class="p">,</span><span class="w"> </span><span class="n">legend</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"2019"</span><span class="p">,</span><span class="w"> </span><span class="s2">"2020"</span><span class="p">,</span><span class="w"> </span><span class="s2">"2021"</span><span class="p">,</span><span class="w"> </span><span class="s2">"2022"</span><span class="p">),</span><span class="w"> 
       </span><span class="n">lty</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">),</span><span class="w"> </span><span class="n">lwd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">2</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">2</span><span class="p">),</span><span class="w"> 
       </span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"red"</span><span class="p">,</span><span class="w"> </span><span class="n">my_palette</span><span class="p">),</span><span class="w">
       </span><span class="n">inset</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.01</span><span class="p">)</span></code></pre></figure> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/renewed-website/assets/img/TSA_screens-480.webp 480w,/renewed-website/assets/img/TSA_screens-800.webp 800w,/renewed-website/assets/img/TSA_screens-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/renewed-website/assets/img/TSA_screens.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="TSA checks" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Okay, this is a little confusing. The most recent data is in the top right, the blue curve over the red one.</p> <p>Things become a little hairier if one wants to, say, plot all the data in sequence rather than in parallel, i.e., plot all dates from 2019 to today. Of course, the table provided by the TSA is itself created from data that is in the format we want, but as far as I am able to tell, the table we downloaded earlier is the only way for the public to access that data. (If anybody knows if the data is on an Open Data server such as <a href="https://www.data.gov/">data.gov</a> in unedited form, drop me an email.)</p> <p>To get a sense of what needs to be done, let us first look at several interesting places in the table: the top (the most recent data points), the switching point between calendar years and the bottom (with the soon to be filled information). Looking at the situation today (15 February 2022), this is what we have.</p> <table class="table-striped"> <thead> <tr> <th style="text-align: left">date</th> <th style="text-align: right">vol2022</th> <th style="text-align: right">vol2021</th> <th style="text-align: right">vol2020</th> <th style="text-align: right">vol2019</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">2022-02-14</td> <td style="text-align: right">1731473</td> <td style="text-align: right">967693</td> <td style="text-align: right">2494922</td> <td style="text-align: right">1922613</td> </tr> <tr> <td style="text-align: left">2022-02-13</td> <td style="text-align: right">1815824</td> <td style="text-align: right">946458</td> <td style="text-align: right">2198657</td> <td style="text-align: right">2227730</td> </tr> <tr> <td style="text-align: left">2022-02-12</td> <td style="text-align: right">1534080</td> <td style="text-align: right">900696</td> <td style="text-align: right">1972248</td> <td style="text-align: right">1950385</td> </tr> <tr> <td style="text-align: left">2022-02-11</td> <td style="text-align: right">1914374</td> <td style="text-align: right">1151420</td> <td style="text-align: right">2507588</td> <td style="text-align: right">1620239</td> </tr> <tr> <td style="text-align: left"> </td> <td style="text-align: right"> </td> <td style="text-align: right"> </td> <td style="text-align: right"> </td> <td style="text-align: right"> </td> </tr> <tr> <td style="text-align: left">2022-01-02</td> <td style="text-align: right">2023309</td> <td style="text-align: right">1327289</td> <td style="text-align: right">2422272</td> <td style="text-align: right">2202111</td> </tr> <tr> <td style="text-align: left">2022-01-01</td> <td style="text-align: right">1616316</td> <td style="text-align: right">1192881</td> <td style="text-align: right">2178656</td> <td style="text-align: right">2345103</td> </tr> <tr> <td style="text-align: left">2021-12-31</td> <td style="text-align: right">NA</td> <td style="text-align: right">1650795</td> <td style="text-align: right">805990</td> <td style="text-align: right">2311732</td> </tr> <tr> <td style="text-align: left">2021-12-30</td> <td style="text-align: right">NA</td> <td style="text-align: right">2049604</td> <td style="text-align: right">874406</td> <td style="text-align: right">2392331</td> </tr> <tr> <td style="text-align: left"> </td> <td style="text-align: right"> </td> <td style="text-align: right"> </td> <td style="text-align: right"> </td> <td style="text-align: right"> </td> </tr> <tr> <td style="text-align: left">2021-02-19</td> <td style="text-align: right">NA</td> <td style="text-align: right">1059452</td> <td style="text-align: right">2429489</td> <td style="text-align: right">2022861</td> </tr> <tr> <td style="text-align: left">2021-02-18</td> <td style="text-align: right">NA</td> <td style="text-align: right">914823</td> <td style="text-align: right">2358511</td> <td style="text-align: right">2177690</td> </tr> <tr> <td style="text-align: left">2021-02-17</td> <td style="text-align: right">NA</td> <td style="text-align: right">773422</td> <td style="text-align: right">2129862</td> <td style="text-align: right">2476445</td> </tr> <tr> <td style="text-align: left">2021-02-16</td> <td style="text-align: right">NA</td> <td style="text-align: right">738825</td> <td style="text-align: right">2190300</td> <td style="text-align: right">2147045</td> </tr> </tbody> </table> <p>My interpretation (which could very well be wrong) of this table is the following. The days in 2022 (until the point where the 2022 column starts to contains NA) are the “real” week days. 2022-02-14, for instance, was a Monday. Then in the remaining columns on that row, we find the closest Monday: in 2021, this was 2021-02-15, in 2020, 2020-02-17 (yay for leap years!) and in 2019, 2020-02-18.</p> <p>Then, once the 2022 column starts to contain NAs because the data points would be in the future, the same becomes true with the 2021 dates remaining. But this leaves some questions:</p> <ol> <li>How was 2020-02-29 dealt with?</li> <li>How are years patched together?</li> <li>Can the overall time series be recomposed by taking the rows from vol2022 from 2022-02-14 to 2022-01-01, ten the rows from vol2021 from 2021-120-31 to 2021-02-16, then the rows from vol2021 from 2022-02-14 to 2022-01-01, etc.?</li> </ol> <p>Altogether: it would be really nice if the TSA put the time series on data.gov! In the meantime, let us assemble the data in sequence and accept the fact that there probably will be issues with the exact dates.</p> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># Find 1 January in dates</span><span class="w">
</span><span class="n">idx_Jan01</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">which</span><span class="p">(</span><span class="n">tsa</span><span class="o">$</span><span class="n">date</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">lubridate</span><span class="o">::</span><span class="n">ymd</span><span class="p">(</span><span class="s2">"2022-01-01"</span><span class="p">))</span><span class="w">
</span><span class="c1"># Where we will store the result</span><span class="w">
</span><span class="n">tsa.ts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">()</span><span class="w">
</span><span class="c1"># Assume all year cutoffs are at the same point on each row</span><span class="w">
</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">c</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">2</span><span class="o">:</span><span class="m">5</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">tsa.ts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">tsa.ts</span><span class="p">,</span><span class="w"> </span><span class="n">tsa</span><span class="p">[</span><span class="n">idx_Jan01</span><span class="m">+1</span><span class="o">:</span><span class="nf">dim</span><span class="p">(</span><span class="n">tsa</span><span class="p">)[</span><span class="m">1</span><span class="p">],</span><span class="w"> </span><span class="n">c</span><span class="p">])</span><span class="w">
  </span><span class="n">tsa.ts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">tsa.ts</span><span class="p">,</span><span class="w"> </span><span class="n">tsa</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="n">idx_Jan01</span><span class="p">,</span><span class="w"> </span><span class="n">c</span><span class="p">])</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="c1"># Get rid of the NAs we put in there..</span><span class="w">
</span><span class="n">tsa.ts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tsa.ts</span><span class="p">[</span><span class="o">!</span><span class="nf">is.na</span><span class="p">(</span><span class="n">tsa.ts</span><span class="p">)]</span><span class="w">
</span><span class="c1"># Make a data frame</span><span class="w">
</span><span class="n">tsa.ts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="w">
  </span><span class="n">date</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">seq</span><span class="p">(</span><span class="n">tsa</span><span class="o">$</span><span class="n">date</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="o">-</span><span class="nf">length</span><span class="p">(</span><span class="n">tsa.ts</span><span class="p">)</span><span class="m">+1</span><span class="p">,</span><span class="w"> </span><span class="n">tsa</span><span class="o">$</span><span class="n">date</span><span class="p">[</span><span class="m">1</span><span class="p">],</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"day"</span><span class="p">),</span><span class="w">
  </span><span class="n">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rev</span><span class="p">(</span><span class="n">tsa.ts</span><span class="p">[</span><span class="o">!</span><span class="nf">is.na</span><span class="p">(</span><span class="n">tsa.ts</span><span class="p">)]))</span></code></pre></figure> <p>Let us plot the result. We will add a moving average, so define the following function.</p> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ma</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">7</span><span class="p">,</span><span class="w"> </span><span class="n">sides</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">stats</span><span class="o">::</span><span class="n">filter</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="m">1</span><span class="o">/</span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p">),</span><span class="w"> </span><span class="n">sides</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sides</span><span class="p">)</span><span class="w">
</span><span class="p">}</span></code></pre></figure> <p>Note that we specify that the filter function is the one from the <code class="language-plaintext highlighter-rouge">stats</code> library (the default one). This is important in case we use the <code class="language-plaintext highlighter-rouge">dplyr</code> library, which redefines the function. We get the following figure, in which the red is the moving average</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/renewed-website/assets/img/TSA_screens_ts-480.webp 480w,/renewed-website/assets/img/TSA_screens_ts-800.webp 800w,/renewed-website/assets/img/TSA_screens_ts-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/renewed-website/assets/img/TSA_screens_ts.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="TSA checks as time series" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Whether the cutoffs are appropriate remains to be seen..</p>]]></content><author><name></name></author><category term="data"/><category term="R"/><summary type="html"><![CDATA[A review of the spatio-temporal spread of COVID-19, both in terms of actual spread and in terms of modelling, that I wrote for Fields Institute Communications.]]></summary></entry><entry><title type="html">Mathematical epidemiology in a data-rich world</title><link href="https://julien-arino.github.io/renewed-website/blog/2020/mathematical-epidemiology-in-a-data-rich-world/" rel="alternate" type="text/html" title="Mathematical epidemiology in a data-rich world"/><published>2020-01-15T00:00:00+00:00</published><updated>2020-01-15T00:00:00+00:00</updated><id>https://julien-arino.github.io/renewed-website/blog/2020/mathematical-epidemiology-in-a-data-rich-world</id><content type="html" xml:base="https://julien-arino.github.io/renewed-website/blog/2020/mathematical-epidemiology-in-a-data-rich-world/"><![CDATA[<p>Find the code <a href="https://github.com/julien-arino/modelling-with-data">here</a>.</p> <p>This post contains some information about the paper <a href="https://doi.org/10.1016/j.idm.2019.12.008">Mathematical epidemiology in a data-rich world</a>, <a href="https://www.sciencedirect.com/journal/infectious-disease-modelling"><em>Infectious Disease Modelling</em></a> <strong>5</strong>: 161-188, 2020.</p> <p>The aim of the paper is to provide some ideas about the acquisition and use, in mathematical epidemiology models, of data originating from open data sources.</p> <p>The paper is part of a special issue on <a href="https://www.sciencedirect.com/journal/infectious-disease-modelling/special-issue/10Z42V1KN0Q"><em>Confronting Infectious Disease Models with Public Health Data</em></a>, edited by <a href="https://sites.ualberta.ca/~myli/">Michael Li</a>, <a href="https://www.math.uvic.ca/~junlingm/dokuwiki/doku.php">Junling Ma</a>, <a href="https://www.researchgate.net/profile/Zhen_Jin/info">Zen Jin</a> and myself.</p> <p>The paper was supposed to come with an electronic appendix, which at present is not included. Also, some edition related quirks were added because of the journal style, with in particular, the <code class="language-plaintext highlighter-rouge">R</code> code appearing as images rather than text and therefore not being selectable. As a consequence, I have made a copy available as a GitHub repository (<a href="https://github.com/julien-arino/modelling-with-data">here</a>). My plan is to keep the file there up to date if links given in the paper were to change.</p> <h2 id="writing-a-scientific-paper-in-rmarkdown">Writing a scientific paper in <code class="language-plaintext highlighter-rouge">Rmarkdown</code></h2> <p>While I have been using <code class="language-plaintext highlighter-rouge">Rmarkdown</code> for a while to generate reports about some of the work I do in the context of the global spread of infectious diseases, I had never actually tried to produce a proper paper using this model. Here are some recommendations based on experience developed in the process.</p> <ol> <li>Save a local copy of your data. Keep in mind that you could end up editing your file while onboard a plane with no wifi, or in a country that filters some sites or who knows what. In any event: with poor or inexistent Internet access. The method I have used in the paper is to include all Internet-based requests within tests and set a global variable <code class="language-plaintext highlighter-rouge">DOWNLOAD</code> that indicates where the data should be downloaded from the web (<code class="language-plaintext highlighter-rouge">TRUE</code>) or if the local cache should be used (<code class="language-plaintext highlighter-rouge">FALSE</code>).</li> <li>Producing a pdf is easy; using a publisher’s tex style is not as easy. For now, I have only included a stripped down version of my <code class="language-plaintext highlighter-rouge">Rmarkdown</code> file that should work out of the box. I will later include in the repository the file that uses the Elsevier document class <code class="language-plaintext highlighter-rouge">elsarticle</code>.</li> </ol> <p><strong>Update 2022-02-15</strong> Because of work on COVID-19 response, I have not posted anything in over two years. For an upcoming summer school, I have to revisit some work on the use of data scraped from Internet and in particular, ensure that the code still works. The revised code is still located <a href="https://github.com/julien-arino/modelling-with-data">here</a> and supersedes the old code.</p>]]></content><author><name></name></author><category term="r-code"/><category term="data"/><category term="simulation"/><summary type="html"><![CDATA[Comments on and Rmarkdown source code of the paper Mathematical epidemiology in a data-rich world (Infectious Diseases Modelling, 2020).]]></summary></entry><entry><title type="html">Ugly loops versus pretty vectors</title><link href="https://julien-arino.github.io/renewed-website/blog/2019/ugly-loops/" rel="alternate" type="text/html" title="Ugly loops versus pretty vectors"/><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><id>https://julien-arino.github.io/renewed-website/blog/2019/ugly-loops</id><content type="html" xml:base="https://julien-arino.github.io/renewed-website/blog/2019/ugly-loops/"><![CDATA[<p>The other day, I posted a prototypical example of use of parLapply, somewhat more advanced than the ones in the documentation; see <a href="https://julien-arino.github.io/blog/2019/skel-parLapply">here</a>.</p> <p>Well, part of the example I gave uses one of my most biggest coding pet peaves, something that I have been fighting against ever since my MatLab days: the dreaded unnecessary <em>for loop</em>. As I was teaching myself the use of the <code class="language-plaintext highlighter-rouge">tictoc</code> library, I thought I would illustrate both.</p> <p>To keep in the spirit of the example in the post mentioned, we set up variations of up to two parameters, \(\beta\) and \(S_0\). We set base values for these parameters.</p> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">param</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">list</span><span class="p">()</span><span class="w">
</span><span class="n">param</span><span class="o">$</span><span class="n">beta</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1e-6</span><span class="w">
</span><span class="n">param</span><span class="o">$</span><span class="n">S0</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">10000</span></code></pre></figure> <p>We will try different ranges of number of cases.</p> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">nb_sims</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">10000</span><span class="p">,</span><span class="m">50000</span><span class="p">,</span><span class="m">100000</span><span class="p">,</span><span class="m">500000</span><span class="p">,</span><span class="m">1000000</span><span class="p">,</span><span class="m">5000000</span><span class="p">,</span><span class="m">10000000</span><span class="p">)</span></code></pre></figure> <p>Now loop on the number of cases. First, clear the <code class="language-plaintext highlighter-rouge">tictoc</code> log, in case it already exists. In each loop, we take note of the time taken to accomplish each group of operations.</p> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">tictoc</span><span class="o">::</span><span class="n">tic.clearlog</span><span class="p">()</span><span class="w">
</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">nb_sims</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="c1"># Just for info in case things get longish</span><span class="w">
  </span><span class="n">print</span><span class="p">(</span><span class="n">sprintf</span><span class="p">(</span><span class="s2">"%d - %d"</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">which</span><span class="p">(</span><span class="n">nb_sims</span><span class="o">==</span><span class="n">n</span><span class="p">)))</span><span class="w">
  </span><span class="c1"># The loop version</span><span class="w">
  </span><span class="n">tictoc</span><span class="o">::</span><span class="n">tic</span><span class="p">(</span><span class="n">sprintf</span><span class="p">(</span><span class="s2">"loop_%d"</span><span class="p">,</span><span class="n">n</span><span class="p">))</span><span class="w">
  </span><span class="n">param_vary</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">list</span><span class="p">()</span><span class="w">
  </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">param_vary</span><span class="p">[[</span><span class="n">i</span><span class="p">]]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">list</span><span class="p">()</span><span class="w">
    </span><span class="n">param_vary</span><span class="p">[[</span><span class="n">i</span><span class="p">]]</span><span class="o">$</span><span class="n">beta</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">runif</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1e-9</span><span class="p">,</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1e-4</span><span class="p">)</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="m">+1</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="m">2</span><span class="o">*</span><span class="n">n</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">param_vary</span><span class="p">[[</span><span class="n">i</span><span class="p">]]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">list</span><span class="p">()</span><span class="w">
    </span><span class="n">param_vary</span><span class="p">[[</span><span class="n">i</span><span class="p">]]</span><span class="o">$</span><span class="n">S0</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">runif</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1000</span><span class="p">,</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">100000</span><span class="p">)</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="p">(</span><span class="m">2</span><span class="o">*</span><span class="n">n</span><span class="m">+1</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="m">3</span><span class="o">*</span><span class="n">n</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">param_vary</span><span class="p">[[</span><span class="n">i</span><span class="p">]]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">list</span><span class="p">()</span><span class="w">
    </span><span class="n">param_vary</span><span class="p">[[</span><span class="n">i</span><span class="p">]]</span><span class="o">$</span><span class="n">beta</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">runif</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1e-9</span><span class="p">,</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1e-4</span><span class="p">)</span><span class="w">
    </span><span class="n">param_vary</span><span class="p">[[</span><span class="n">i</span><span class="p">]]</span><span class="o">$</span><span class="n">S0</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">runif</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1000</span><span class="p">,</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">100000</span><span class="p">)</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="c1"># Vector version</span><span class="w">
  </span><span class="n">tictoc</span><span class="o">::</span><span class="n">toc</span><span class="p">(</span><span class="n">log</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">quiet</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
  </span><span class="n">tictoc</span><span class="o">::</span><span class="n">tic</span><span class="p">(</span><span class="n">sprintf</span><span class="p">(</span><span class="s2">"vect_%d"</span><span class="p">,</span><span class="n">n</span><span class="p">))</span><span class="w">
  </span><span class="n">param_vary</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rbind</span><span class="p">(</span><span class="n">cbind</span><span class="p">(</span><span class="n">runif</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1e-9</span><span class="p">,</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1e-4</span><span class="p">),</span><span class="w">
                            </span><span class="nf">rep</span><span class="p">(</span><span class="n">param</span><span class="o">$</span><span class="n">S0</span><span class="p">,</span><span class="n">n</span><span class="p">)),</span><span class="w">
                      </span><span class="n">cbind</span><span class="p">(</span><span class="nf">rep</span><span class="p">(</span><span class="n">param</span><span class="o">$</span><span class="n">beta</span><span class="p">,</span><span class="n">n</span><span class="p">),</span><span class="w">
                            </span><span class="n">runif</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1000</span><span class="p">,</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">100000</span><span class="p">)),</span><span class="w">
                      </span><span class="n">cbind</span><span class="p">(</span><span class="n">runif</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1e-9</span><span class="p">,</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1e-4</span><span class="p">),</span><span class="w">
                            </span><span class="n">runif</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1000</span><span class="p">,</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">100000</span><span class="p">)))</span><span class="w">
  </span><span class="n">colnames</span><span class="p">(</span><span class="n">param_vary</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"beta"</span><span class="p">,</span><span class="s2">"S0"</span><span class="p">)</span><span class="w">
  </span><span class="n">tictoc</span><span class="o">::</span><span class="n">toc</span><span class="p">(</span><span class="n">log</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">quiet</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
  </span><span class="c1"># Convert vector to list</span><span class="w">
  </span><span class="n">tictoc</span><span class="o">::</span><span class="n">tic</span><span class="p">(</span><span class="n">sprintf</span><span class="p">(</span><span class="s2">"conv_%d"</span><span class="p">,</span><span class="n">n</span><span class="p">))</span><span class="w">
  </span><span class="n">param_vary</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">lapply</span><span class="p">(</span><span class="nf">seq_len</span><span class="p">(</span><span class="n">nrow</span><span class="p">(</span><span class="n">param_vary</span><span class="p">)),</span><span class="w">
                       </span><span class="k">function</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="n">param_vary</span><span class="p">[</span><span class="n">i</span><span class="p">,])</span><span class="w">
  </span><span class="n">tictoc</span><span class="o">::</span><span class="n">toc</span><span class="p">(</span><span class="n">log</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">quiet</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="n">log.lst</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tictoc</span><span class="o">::</span><span class="n">tic.log</span><span class="p">(</span><span class="n">format</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span></code></pre></figure> <p>The following is adapted from the <code class="language-plaintext highlighter-rouge">tictoc</code> documentation.</p> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">timings</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cbind</span><span class="p">(</span><span class="n">nb_sims</span><span class="p">,</span><span class="w">
                 </span><span class="n">matrix</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unlist</span><span class="p">(</span><span class="n">lapply</span><span class="p">(</span><span class="n">log.lst</span><span class="p">,</span><span class="w">
                                             </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="n">x</span><span class="o">$</span><span class="n">toc</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">x</span><span class="o">$</span><span class="n">tic</span><span class="p">)),</span><span class="w">
                        </span><span class="n">nrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">length</span><span class="p">(</span><span class="n">nb_sims</span><span class="p">),</span><span class="w">
                        </span><span class="n">ncol</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="p">,</span><span class="w">
                        </span><span class="n">byrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">))</span><span class="w">
</span><span class="n">colnames</span><span class="p">(</span><span class="n">timings</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"n"</span><span class="p">,</span><span class="s2">"loopT"</span><span class="p">,</span><span class="s2">"vectT"</span><span class="p">,</span><span class="s2">"convT"</span><span class="p">)</span><span class="w">
</span><span class="n">timings</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.data.frame</span><span class="p">(</span><span class="n">timings</span><span class="p">)</span></code></pre></figure> <p>Add a few additional pieces of information about timing: the total time in the second case (making the vectors and converting them to lists) as well as acceleration factors when making the vector and in total of the second method.</p> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">timings</span><span class="o">$</span><span class="n">sumVect</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">timings</span><span class="o">$</span><span class="n">vectT</span><span class="o">+</span><span class="n">timings</span><span class="o">$</span><span class="n">convT</span><span class="w">
</span><span class="n">timings</span><span class="o">$</span><span class="n">multVect</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">round</span><span class="p">(</span><span class="n">timings</span><span class="o">$</span><span class="n">loopT</span><span class="o">/</span><span class="n">timings</span><span class="o">$</span><span class="n">vectT</span><span class="p">,</span><span class="m">2</span><span class="p">)</span><span class="w">
</span><span class="n">timings</span><span class="o">$</span><span class="n">multSVect</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">round</span><span class="p">(</span><span class="n">timings</span><span class="o">$</span><span class="n">loopT</span><span class="o">/</span><span class="n">timings</span><span class="o">$</span><span class="n">sumVect</span><span class="p">,</span><span class="m">2</span><span class="p">)</span></code></pre></figure> <p>Finally, use <code class="language-plaintext highlighter-rouge">knitr</code> to make a decent looking table of the results.</p> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">knitr</span><span class="o">::</span><span class="n">kable</span><span class="p">(</span><span class="n">timings</span><span class="p">,</span><span class="n">format.args</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="n">big.mark</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">","</span><span class="p">,</span><span class="n">scientific</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">))</span></code></pre></figure> <p>Here are the results:</p> <table> <thead> <tr> <th style="text-align: right">n</th> <th style="text-align: right">loopT</th> <th style="text-align: right">vectT</th> <th style="text-align: right">convT</th> <th style="text-align: right">sumVect</th> <th style="text-align: right">multVect</th> <th style="text-align: right">multSVect</th> </tr> </thead> <tbody> <tr> <td style="text-align: right">10,000</td> <td style="text-align: right">0.138</td> <td style="text-align: right">0.001</td> <td style="text-align: right">0.046</td> <td style="text-align: right">0.047</td> <td style="text-align: right">138.00</td> <td style="text-align: right">2.94</td> </tr> <tr> <td style="text-align: right">50,000</td> <td style="text-align: right">0.545</td> <td style="text-align: right">0.006</td> <td style="text-align: right">0.327</td> <td style="text-align: right">0.333</td> <td style="text-align: right">90.83</td> <td style="text-align: right">1.64</td> </tr> <tr> <td style="text-align: right">100,000</td> <td style="text-align: right">1.207</td> <td style="text-align: right">0.008</td> <td style="text-align: right">0.346</td> <td style="text-align: right">0.354</td> <td style="text-align: right">150.88</td> <td style="text-align: right">3.41</td> </tr> <tr> <td style="text-align: right">500,000</td> <td style="text-align: right">8.587</td> <td style="text-align: right">0.453</td> <td style="text-align: right">1.712</td> <td style="text-align: right">2.165</td> <td style="text-align: right">18.96</td> <td style="text-align: right">3.97</td> </tr> <tr> <td style="text-align: right">1,000,000</td> <td style="text-align: right">19.130</td> <td style="text-align: right">1.597</td> <td style="text-align: right">3.832</td> <td style="text-align: right">5.429</td> <td style="text-align: right">11.98</td> <td style="text-align: right">3.52</td> </tr> <tr> <td style="text-align: right">5,000,000</td> <td style="text-align: right">122.943</td> <td style="text-align: right">4.359</td> <td style="text-align: right">22.746</td> <td style="text-align: right">27.105</td> <td style="text-align: right">28.20</td> <td style="text-align: right">4.54</td> </tr> <tr> <td style="text-align: right">10,000,000</td> <td style="text-align: right">277.161</td> <td style="text-align: right">8.648</td> <td style="text-align: right">40.261</td> <td style="text-align: right">48.909</td> <td style="text-align: right">32.05</td> <td style="text-align: right">5.67</td> </tr> </tbody> </table> <p>Clearly, it would be better here to use a parallel version of <code class="language-plaintext highlighter-rouge">apply</code> operating on matrix rows than on lists, since this would not require a further conversion to a list. But the cases are not always this structured.</p> <p>Ah, yes, one last thing: when \(n\) is large, some of the variables can become quite large (the last matrix by itself is 10.1 Gb). Unless you have pretty decent RAM, don’t try this at home.</p>]]></content><author><name></name></author><category term="simulation"/><category term="r-code"/><summary type="html"><![CDATA[A comparison of the execution times of loops and vector operations in R using the tictoc library.]]></summary></entry></feed>